{
	"info": {
		"_postman_id": "cb5d2fef-5793-40bb-9589-3105d6a50007",
		"name": "Routes",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33378175",
		"_collection_link": "https://red-zodiac-879129.postman.co/workspace/C214---LAB~317bbc56-819b-4922-8105-3b3016a208ba/collection/33378175-cb5d2fef-5793-40bb-9589-3105d6a50007?action=share&source=collection_link&creator=33378175"
	},
	"item": [
		{
			"name": "User auth",
			"item": [
				{
					"name": "register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const jwt = responseJson.access_token;\r",
									"\r",
									"pm.environment.set('jwt_token', `${jwt}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"handler\": \"testando register\",\r\n  \"password\": \"123456\",\r\n  \"email\": \"testandoregister@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}register",
							"host": [
								"{{base_url}}register"
							],
							"query": [
								{
									"key": "username",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"const jwt = responseJson.access_token;\r",
									"\r",
									"pm.environment.set('jwt_token', `${jwt}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "test",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123456",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}login",
							"host": [
								"{{base_url}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "register test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for response status code\r",
									"pm.test(\"Response status code is 422\", function () {\r",
									"  pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify the structure of the response body\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}register",
							"host": [
								"{{base_url}}register"
							]
						}
					},
					"response": []
				},
				{
					"name": "login test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response data type is JSON\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}login",
							"host": [
								"{{base_url}}login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test Posts",
			"item": [
				{
					"name": "test get posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is not null\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.not.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields and attributes\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}posts/",
							"host": [
								"{{base_url}}posts"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "user_id",
									"value": "aaaa",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "test get post by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Post content\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"dias de luta, dias de gloria\");\r",
									"});\r",
									"\r",
									"pm.test(\"Post id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"67212aff9b964033067338b2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Post author\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"test\");\r",
									"});\r",
									"\r",
									"pm.test(\"Liked\", function () {\r",
									"     var responseData = pm.response.json();\r",
									"     pm.expect(responseData).to.be.an('object');\r",
									"     pm.expect(responseData.likes).to.be.an('array').that.is.not.empty;\r",
									"     pm.expect(responseData.isLiked).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Commented\", function () {\r",
									"     var responseJSON = pm.response.json();\r",
									"     pm.expect(responseJSON).to.be.an('object');\r",
									"     pm.expect(responseJSON.comments).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}posts/67212aff9b964033067338b2",
							"host": [
								"{{base_url}}posts"
							],
							"path": [
								"67212aff9b964033067338b2"
							]
						}
					},
					"response": []
				},
				{
					"name": "test update post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the schema of the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('content').that.is.a('string');\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Presence of required fields in the response\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.have.property('content');\r",
									"  pm.expect(responseData).to.have.property('likes');\r",
									"  pm.expect(responseData).to.have.property('isLiked');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the post ID in the response matches the requested post ID\", function () {\r",
									"    const requestedPostID = \"671fcbe0c4f2eed0bb8aec20\";\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData._id).to.equal(requestedPostID);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}posts/671fcbe0c4f2eed0bb8aec20",
							"host": [
								"{{base_url}}posts"
							],
							"path": [
								"671fcbe0c4f2eed0bb8aec20"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Follow",
			"item": [
				{
					"name": "follow_user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}follow/users/:other_user_handler",
							"host": [
								"{{base_url}}follow"
							],
							"path": [
								"users",
								":other_user_handler"
							],
							"variable": [
								{
									"key": "other_user_handler",
									"value": "cccc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "follow_user test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have the correct schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('detail');\r",
									"    });\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}follow/users/:other_user_handler",
							"host": [
								"{{base_url}}follow"
							],
							"path": [
								"users",
								":other_user_handler"
							],
							"variable": [
								{
									"key": "other_user_handler",
									"value": "cccc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "unfollow_user test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body should have the correct schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('detail');\r",
									"    });\r",
									"    \r",
									"pm.test(\"Response Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body should have the correct schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.detail).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}follow/users/:other_user_handler/unfollow",
							"host": [
								"{{base_url}}follow"
							],
							"path": [
								"users",
								":other_user_handler",
								"unfollow"
							],
							"variable": [
								{
									"key": "other_user_handler",
									"value": "cccc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "unfollow_user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}follow/users/:other_user_handler/unfollow",
							"host": [
								"{{base_url}}follow"
							],
							"path": [
								"users",
								":other_user_handler",
								"unfollow"
							],
							"variable": [
								{
									"key": "other_user_handler",
									"value": "cccc"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed Content-Type check and removed unnecessary response body check\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is 'application/json'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response schema for required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.handler).to.exist;\r",
									"    pm.expect(responseData.email).to.exist;\r",
									"    pm.expect(responseData._id).to.exist;\r",
									"    pm.expect(responseData.username).to.exist;\r",
									"    pm.expect(responseData.bio).to.exist;\r",
									"    pm.expect(responseData.followers).to.exist;\r",
									"    pm.expect(responseData.following).to.exist;\r",
									"    pm.expect(responseData.isFollowing).to.exist;\r",
									"    pm.expect(responseData.isMe).to.exist;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}user/aaaa",
							"host": [
								"{{base_url}}user"
							],
							"path": [
								"aaaa"
							]
						}
					},
					"response": []
				},
				{
					"name": "get multiple users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000); //fixed response time threshold\r",
									"});\r",
									"\r",
									"pm.test(\"Response Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.forEach(user => {\r",
									"        pm.expect(user).to.have.property('handler');\r",
									"        pm.expect(user).to.have.property('password');\r",
									"        pm.expect(user).to.have.property('email');\r",
									"        pm.expect(user).to.have.property('_id');\r",
									"        pm.expect(user).to.have.property('username');\r",
									"        pm.expect(user).to.have.property('bio');\r",
									"        pm.expect(user).to.have.property('followers');\r",
									"        pm.expect(user).to.have.property('following');\r",
									"        pm.expect(user).to.have.property('isFollowing');\r",
									"        pm.expect(user).to.have.property('isMe');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  responseData.forEach(function(user) {\r",
									"    pm.expect(user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response for the user object and its properties\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(user) {\r",
									"        pm.expect(user).to.be.an('object');\r",
									"        pm.expect(user.handler).to.be.a('string');\r",
									"        pm.expect(user.password).to.be.a('string');\r",
									"        pm.expect(user.email).to.be.a('string');\r",
									"        pm.expect(user._id).to.be.a('string');\r",
									"        pm.expect(user.username).to.be.a('string');\r",
									"        pm.expect(user.bio).to.be.a('string');\r",
									"        pm.expect(user.followers).to.be.an('array');\r",
									"        pm.expect(user.following).to.be.an('array');\r",
									"        pm.expect(user.isFollowing).to.be.a('boolean');\r",
									"        pm.expect(user.isMe).to.be.a('boolean');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Number of elements in the response array is 2\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf(2);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}user/?page_num=1&page_size=2&order_by=handler&desc=false",
							"host": [
								"{{base_url}}user"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "page_num",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "2"
								},
								{
									"key": "order_by",
									"value": "handler"
								},
								{
									"key": "desc",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update user",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"cccc@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}user/aaaa",
							"host": [
								"{{base_url}}user"
							],
							"path": [
								"aaaa"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Email content\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"cccc@gmail.com\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the schema for the response body\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.have.property('handler').that.is.a('string');\r",
									"  pm.expect(responseData).to.have.property('password').that.is.a('string');\r",
									"  pm.expect(responseData).to.have.property('email').that.is.a('string');\r",
									"  pm.expect(responseData).to.have.property('_id').that.is.a('string');\r",
									"  pm.expect(responseData).to.have.property('username').that.is.a('string');\r",
									"  pm.expect(responseData).to.have.property('bio').that.is.a('string');\r",
									"  pm.expect(responseData).to.have.property('followers').that.is.an('array');\r",
									"  pm.expect(responseData).to.have.property('following').that.is.an('array');\r",
									"  pm.expect(responseData).to.have.property('isFollowing').that.is.a('boolean');\r",
									"  pm.expect(responseData).to.have.property('isMe').that.is.a('boolean');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Handler field should not be empty\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.handler).to.exist.and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email field is in a valid email format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.email).to.match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}user/cccc",
							"host": [
								"{{base_url}}user"
							],
							"path": [
								"cccc"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}user/bbbb",
							"host": [
								"{{base_url}}user"
							],
							"path": [
								"bbbb"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete user test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response schema for the deleted user\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('detail');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field - detail\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.detail).to.exist;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}user/bbbb",
							"host": [
								"{{base_url}}user"
							],
							"path": [
								"bbbb"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Posts",
			"item": [
				{
					"name": "get posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Posts array should exist and be an array of objects\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(post => {\r",
									"        pm.expect(post).to.be.an('object');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Posts array contains the expected number of elements based on the page_size parameter\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').with.lengthOf(10);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}posts/?page_num=1&page_size=10",
							"host": [
								"{{base_url}}posts"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "page_num",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get post by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}posts/672129b19b964033067338b0",
							"host": [
								"{{base_url}}posts"
							],
							"path": [
								"672129b19b964033067338b0"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update post",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"content\": \"post updated\",\r\n  \"author\": \"Updated_User_123\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}posts/671fcbe0c4f2eed0bb8aec20",
							"host": [
								"{{base_url}}posts"
							],
							"path": [
								"671fcbe0c4f2eed0bb8aec20"
							]
						}
					},
					"response": []
				},
				{
					"name": "give like",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}posts/67212aff9b964033067338b2/like",
							"host": [
								"{{base_url}}posts"
							],
							"path": [
								"67212aff9b964033067338b2",
								"like"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete post",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}posts/672129b19b964033067338b0",
							"host": [
								"{{base_url}}posts"
							],
							"path": [
								"672129b19b964033067338b0"
							]
						}
					},
					"response": []
				},
				{
					"name": "dislike",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}posts/67212aff9b964033067338b2/dislike",
							"host": [
								"{{base_url}}posts"
							],
							"path": [
								"67212aff9b964033067338b2",
								"dislike"
							]
						}
					},
					"response": []
				},
				{
					"name": "get post by user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}posts/author/Eueu?page_num=1&page_size=10",
							"host": [
								"{{base_url}}posts"
							],
							"path": [
								"author",
								"Eueu"
							],
							"query": [
								{
									"key": "page_num",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Get comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Updated response time test to 300ms\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the structure and data types of the response JSON schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    pm.expect(responseData[0].comments).to.be.an('array');\r",
									"    responseData[0].comments.forEach(function(comment) {\r",
									"        pm.expect(comment).to.be.an('object');\r",
									"        pm.expect(comment._id).to.be.a('string');\r",
									"        pm.expect(comment.content).to.be.a('string');\r",
									"        pm.expect(comment.commented_by).to.be.a('string');\r",
									"        pm.expect(comment.date).to.be.a('string');\r",
									"        pm.expect(comment.likes).to.be.an('array');\r",
									"        pm.expect(comment.reposts).to.be.an('array');\r",
									"        pm.expect(comment.comments).to.be.an('array');\r",
									"        pm.expect(comment.edited).to.be.a('boolean');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}comments/67212aff9b964033067338b2/?page_num=1&page_size=10&order_by=date&desc=false&=",
							"host": [
								"{{base_url}}comments"
							],
							"path": [
								"67212aff9b964033067338b2",
								""
							],
							"query": [
								{
									"key": "page_num",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "10"
								},
								{
									"key": "order_by",
									"value": "date"
								},
								{
									"key": "desc",
									"value": "false"
								},
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit comment",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"new_comment\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}comments/edit/COMMENT_ID/",
							"host": [
								"{{base_url}}comments"
							],
							"path": [
								"edit",
								"COMMENT_ID",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Like comment",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_handler\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}comments/like/COMMENT_ID/",
							"host": [
								"{{base_url}}comments"
							],
							"path": [
								"like",
								"COMMENT_ID",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Dislike comment",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_handler\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}comments/dislike/COMMENT_ID",
							"host": [
								"{{base_url}}comments"
							],
							"path": [
								"dislike",
								"COMMENT_ID"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}comments/delete/COMMNET_ID",
							"host": [
								"{{base_url}}comments"
							],
							"path": [
								"delete",
								"COMMNET_ID"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}